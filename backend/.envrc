# .envrc - direnv 자동 환경 설정
# 이 파일은 디렉토리 진입시 자동으로 실행됩니다.

# PS1 경고 방지
unset PS1

# 가상환경 강제 설정
if [ ! -d ".venv" ]; then
    echo "🔧 가상환경이 없습니다. 자동으로 생성합니다..."
    poetry config virtualenvs.in-project true
    poetry config virtualenvs.create true
    poetry install
    echo "✅ 가상환경 생성 완료!"
fi

# 가상환경 강제 활성화
if [ -d ".venv" ]; then
    source ./.venv/bin/activate
    echo "🐍 가상환경 강제 활성화: $(basename $VIRTUAL_ENV)"
else
    echo "❌ 가상환경 활성화에 실패했습니다."
    exit 1
fi

# 가상환경 활성화 검증
if [ -z "$VIRTUAL_ENV" ]; then
    echo "❌ 가상환경이 활성화되지 않았습니다!"
    exit 1
fi

# Python 경로 확인 및 설정
export PYTHONPATH="${PWD}:${PYTHONPATH}"

# 가상환경 Python 강제 사용
export PYTHON_BIN="${VIRTUAL_ENV}/bin/python"
export PIP_BIN="${VIRTUAL_ENV}/bin/pip"

# 개발 환경 변수 로드
if [ -f ".env.development" ]; then
    set -a
    source .env.development
    set +a
    echo "📋 개발환경 설정 로드완료"
fi

# Poetry 가상환경 경로 확인
if command -v poetry >/dev/null 2>&1; then
    export POETRY_VENV_PATH=$(poetry env info --path 2>/dev/null || echo "")
fi

# scripts 디렉토리를 PATH에 추가
export PATH="${PWD}/scripts:${PATH}"

echo "✅ 개발환경 준비 완료! 'help' 명령어로 사용법을 확인하세요."