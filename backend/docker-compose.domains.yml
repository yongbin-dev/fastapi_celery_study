version: "3.8"

# ==================== 공통 설정 템플릿 ====================
x-common-env: &common-env
  env_file:
    - .env.production
  environment:
    - TZ=Asia/Seoul
    - ENVIRONMENT=production
  # volumes:
  #   - ./app:/app/app
  restart: unless-stopped
  networks:
    - app-network

x-common-dev-env: &common-dev-env
  env_file:
    - .env.development
  environment:
    - ENVIRONMENT=development
    - TZ=Asia/Seoul
  # volumes:
  #   - ./app:/app/app
  restart: unless-stopped
  networks:
    - app-network

# GPU 서비스용: 공통 설정 + GPU runtime
x-gpu-service: &gpu-service
  <<: *common-env
  runtime: nvidia

services:
  # ==================== 베이스 이미지 ====================
  ml-base:
    build:
      context: .
      dockerfile: Dockerfile.ml-base
    image: backend-ml-base:latest
    container_name: ml-base-builder
    command: /bin/true # 빌드만 하고 실행하지 않음

  ml-gpu-base:
    build:
      context: .
      dockerfile: Dockerfile.ml-gpu-base
    image: backend-ml-gpu-base:latest
    container_name: ml-gpu-base-builder
    command: /bin/true # 빌드만 하고 실행하지 않음
    runtime: nvidia

  # ==================== 서비스 컨테이너 ====================
  app-base:
    <<: *common-env
    build:
      context: .
      dockerfile: Dockerfile.cpu
      args:
        - DOMAIN_EXTRA=prod # 기본 프로덕션 의존성만 설치
    container_name: fastapi-app-base
    # ports:
    #   - "35050:5050"
    volumes:
      - ./app:/app/app
      - ./logs/base:/app/logs
    environment:
      - TZ=Asia/Seoul
      - DOMAIN=base
      - OCR_MODEL_SERVER_URL=http://ocr-model-server:8001
    depends_on:
      - ocr-model-server

  # ==================== 이전 OCR 컨테이너 (모델 서버로 대체) ====================
  # app-ocr-cpu:
  #   <<: *common-dev-env
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.ocr-cpu
  #     args:
  #       - DOMAIN_EXTRA=ocr-cpu
  #   image: backend-app-ocr-cpu:latest
  #   container_name: fastapi-app-ocr-cpu
  #   # ports:
  #   #   - "35052:5050"
  #   volumes:
  #     - ./app:/app/app
  #     - ./logs/ocr-cpu:/app/logs
  #   environment:
  #     - TZ=Asia/Seoul
  #     - DOMAIN=ocr
  #   depends_on:
  #     - ml-base

  # app-ocr-gpu:
  #   <<: *gpu-service
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.ocr-gpu
  #     args:
  #       - DOMAIN_EXTRA=ocr-gpu
  #   image: backend-app-ocr-gpu:latest
  #   container_name: fastapi-app-ocr-gpu
  #   # ports:
  #   #   - "35053:5050"
  #   volumes:
  #     - ./app:/app/app
  #     - ./logs/ocr-gpu:/app/logs
  #   environment:
  #     - TZ=Asia/Seoul
  #     - DOMAIN=ocr
  #   depends_on:
  #     - ml-gpu-base

  app-llm:
    <<: *gpu-service
    build:
      context: .
      dockerfile: Dockerfile.llm
      args:
        - DOMAIN_EXTRA=llm
    image: backend-app-llm:latest
    container_name: fastapi-app-llm
    # ports:
    #   - "35051:5050"
    volumes:
      - ./app:/app/app
      - ./logs/llm:/app/logs
    environment:
      - TZ=Asia/Seoul
      - DOMAIN=llm
    depends_on:
      - ml-gpu-base

  # ==================== 모델 서버 ====================
  ocr-model-server:
    <<: *gpu-service
    build:
      context: .
      dockerfile: model_servers/ocr_server/Dockerfile
    image: backend-ocr-model-server:latest
    container_name: ocr-model-server
    ports:
      - "8001:8001"
    volumes:
      - ./app:/app/app
      - ./logs/ocr-model:/logs
      - ~/.paddleocr:/root/.paddleocr # 모델 캐시
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - TZ=Asia/Seoul
    depends_on:
      - ml-gpu-base
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== API Gateway ====================
  # nginx-gateway:
  #   image: nginx:alpine
  #   container_name: api-gateway
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./logs/nginx:/var/log/nginx
  #   depends_on:
  #     - app-base
  #     - app-ocr-cpu
  #     - app-ocr-gpu
  #     - app-llm
  #   restart: unless-stopped
  #   networks:
  #     - app-network

networks:
  app-network:
    external: true
