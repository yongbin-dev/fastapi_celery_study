[project]
name = "fastapi-celery-multi-domain"
version = "0.2.0"
description = "팀별 도메인 기반 FastAPI + Celery 마이크로서비스"
authors = [{name = "yb", email = "dydqls5757@gmail.com"}]
readme = "README.md"
requires-python = ">=3.12,<3.13"

# ===== 공통 필수 의존성 =====
dependencies = [
    "fastapi>=0.109.0", # 비동기 Python 웹 프레임워크 (REST API, 웹소켓 등 구현)
    "uvicorn[standard]>=0.27.0", # ASGI 서버 (FastAPI 실행용, 고성능/비동기 지원)
    "python-multipart>=0.0.6", # 멀티파트 폼 데이터(파일 업로드 등) 파싱 지원
    "celery>=5.5.3", # 비동기 작업 큐 (백그라운드 태스크 처리)
    "redis>=5.0.0", # 인메모리 데이터베이스/캐시, Celery 브로커/백엔드로도 사용
    "sqlalchemy>=2.0.43", # ORM (데이터베이스 모델링 및 쿼리 지원)
    "alembic>=1.16.5", # SQLAlchemy 기반 DB 마이그레이션 툴
    "asyncpg>=0.30.0", # PostgreSQL용 비동기 드라이버
    "psycopg2-binary>=2.9.10", # PostgreSQL용 동기 드라이버 (전통적, 안정적)
    "psycopg>=3.2.10", # PostgreSQL 최신 드라이버 (비동기 지원 가능)
    "greenlet>=3.2.4", # 동시성 라이브러리 (SQLAlchemy 비동기 내부 실행 시 필요)
    "pydantic>=2.11.9", # 데이터 검증 및 직렬화/역직렬화 (FastAPI 모델 정의에 사용)
    "pydantic-settings>=2.1.0", # 환경변수/설정 관리 (pydantic 기반 설정 클래스)
    "python-dotenv>=1.0.0", # .env 파일을 불러와 환경변수로 적용
    "httpx>=0.28.1", # 비동기 HTTP 클라이언트 (API 호출 등)
    "psutil>=7.0.0", # 시스템 리소스 모니터링 (CPU, 메모리, 프로세스 등)
    "python-json-logger>=2.0.7", # JSON 형태의 로깅 지원
    "python-levenshtein>=0.27.1", # 문자열 유사도 계산(편집거리 알고리즘)
    "scikit-learn>=1.7.2", # 머신러닝/통계 모델링 라이브러리
    "supabase>=2.22.0",
    "types-requests>=2.32.4.20250913",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",                 # 테스트 프레임워크
    "pytest-asyncio>=0.21.1",        # asyncio 환경에서 pytest 지원
    "pytest-cov>=4.1.0",             # 테스트 커버리지 측정
    "ruff>=0.13.2",                  # Python 린터/포매터 (flake8 + isort 대체 가능)
    "mypy>=1.8.0",                   # 정적 타입 체크
    "pre-commit>=3.6.0",             # Git hook 관리 (자동 린트, 포맷팅, 테스트 실행)
    "ipython>=8.19.0",               # 인터랙티브 파이썬 셸
    "ipdb>=0.13.13",                 # 디버거 (pdb 확장판, IPython 통합)
    "aiosqlite>=0.21.0",             # SQLite 비동기 드라이버 (테스트용 DB)
    # OCR 의존성 (CPU 버전)
    "opencv-python>=4.9.0",          # 이미지 처리(OpenCV 라이브러리)
    "Pillow>=10.2.0",                # 이미지 처리(PIL 라이브러리 대체)
    "python-Levenshtein>=0.23.0",    # 문자열 거리 계산 (OCR 후 텍스트 비교 등에 활용)
    "easyocr>=1.7.2",                # PyTorch 기반 OCR 엔진
    "paddleocr>=2.8.0,<3.0.0",       # PaddlePaddle 기반 OCR 라이브러리
    "paddlepaddle>=2.6.2,<3.0.0",    # PaddleOCR 구동을 위한 딥러닝 프레임워크
]

prod = [
    "gunicorn>=21.2.0",
    "flower>=2.0.1",
]

# ML 공통 베이스 (torch + 기본 라이브러리)
ml-base = [
    "torch>=2.2.0",
    "torchvision>=0.17.0",
    "opencv-python>=4.9.0",
    "Pillow>=10.2.0",
    "numpy>=2.0.0",
    "scipy>=1.13.0",
    "scikit-learn>=1.7.2",
    "scikit-image>=0.25.0",
]

llm = [
    "transformers>=4.40.0",
    "tokenizers>=0.15.0",
    "sentencepiece>=0.1.99",
    "sentence-transformers>=2.2.2",
    "huggingface-hub>=0.23.0",
    "langchain>=0.3.0",
    "langchain-ollama>=0.3.8",
    "fastapi-celery-multi-domain[ml-base]",
]

# 공통 OCR 의존성
ocr-base = [
    "python-Levenshtein>=0.23.0",
]

# OCR CPU 버전 (경량화)
ocr-cpu = [
    "paddleocr>=2.8.0,<3.0.0",
    "paddlepaddle>=2.6.2,<3.0.0",  # CPU 버전 (GPU 버전보다 훨씬 가벼움)
    "easyocr>=1.7.2",
    "fastapi-celery-multi-domain[ml-base]",
    "fastapi-celery-multi-domain[ocr-base]",
]

# OCR GPU 버전
ocr-gpu = [
    "paddleocr>=2.8.0,<3.0.0",
    "paddlepaddle-gpu>=2.6.2,<3.0.0",  # GPU 버전
    "easyocr>=1.7.2",
    "fastapi-celery-multi-domain[ml-base]",
    "fastapi-celery-multi-domain[ocr-base]",
]

# 하위 호환성 유지 (기본은 GPU)
ocr = [
    "fastapi-celery-multi-domain[ocr-gpu]",
]


[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cuda"
url = "https://download.pytorch.org/whl/cu126"
explicit = true

# ===== Ruff 설정 =====
[tool.ruff]
line-length = 88
target-version = "py312"
exclude = [
    ".git",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    "__pycache__",
    "migrations",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "W",   # pycodestyle warnings
]

[tool.ruff.lint.isort]
known-first-party = ["app"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.pyright]
typeCheckingMode = "basic"  # 또는 "standard", "strict"
pythonVersion = "3.12"
include = ["app"]
exclude = [
    ".git",
    ".venv",
    ".pytest_cache",
    "__pycache__",
    "migrations",
]
reportMissingImports = true
reportMissingTypeStubs = false


# ===== 테스트 설정 =====
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--verbose",
    "--cov=app",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "domain_llm: LLM 도메인 테스트",
    "domain_ocr: OCR 도메인 테스트",
]

# ===== Build 설정 =====
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]
