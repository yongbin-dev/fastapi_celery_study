"""Add chain_execution_id to task_logs table

Revision ID: 0707af2e8897
Revises: f9bd8b69b1e4
Create Date: 2025-09-19 14:09:31.608268

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0707af2e8897'
down_revision: Union[str, Sequence[str], None] = 'f9bd8b69b1e4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_execution_status_created'), table_name='task_execution_history')
    op.drop_index(op.f('idx_execution_task_attempt'), table_name='task_execution_history')
    op.drop_index(op.f('ix_task_execution_history_attempt_number'), table_name='task_execution_history')
    op.drop_index(op.f('ix_task_execution_history_task_id'), table_name='task_execution_history')
    op.drop_table('task_execution_history')
    op.drop_index(op.f('idx_task_results_size'), table_name='task_results')
    op.drop_index(op.f('idx_task_results_type'), table_name='task_results')
    op.drop_index(op.f('ix_task_results_task_id'), table_name='task_results')
    op.drop_table('task_results')
    op.drop_index(op.f('idx_dependency_type'), table_name='task_dependencies')
    op.drop_index(op.f('ix_task_dependencies_depends_on_task_id'), table_name='task_dependencies')
    op.drop_index(op.f('ix_task_dependencies_task_id'), table_name='task_dependencies')
    op.drop_table('task_dependencies')
    op.drop_index(op.f('idx_metadata_parent_root'), table_name='task_metadata')
    op.drop_index(op.f('idx_metadata_worker_queue'), table_name='task_metadata')
    op.drop_index(op.f('ix_task_metadata_task_id'), table_name='task_metadata')
    op.drop_index(op.f('ix_task_metadata_worker_name'), table_name='task_metadata')
    op.drop_table('task_metadata')
    op.add_column('task_logs', sa.Column('chain_execution_id', sa.Integer(), nullable=True, comment='소속된 체인 실행 ID'))
    op.create_index('idx_task_logs_chain_execution', 'task_logs', ['chain_execution_id', 'status'], unique=False)
    op.create_index(op.f('ix_task_logs_chain_execution_id'), 'task_logs', ['chain_execution_id'], unique=False)
    op.create_foreign_key(None, 'task_logs', 'chain_executions', ['chain_execution_id'], ['id'], ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'task_logs', type_='foreignkey')
    op.drop_index(op.f('ix_task_logs_chain_execution_id'), table_name='task_logs')
    op.drop_index('idx_task_logs_chain_execution', table_name='task_logs')
    op.drop_column('task_logs', 'chain_execution_id')
    op.create_table('task_metadata',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='고유 식별자'),
    sa.Column('task_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='작업 ID (외래키)'),
    sa.Column('worker_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='워커 이름 (예: celery@worker-01)'),
    sa.Column('queue_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='큐 이름 (예: default, priority)'),
    sa.Column('exchange', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Exchange 이름 (AMQP)'),
    sa.Column('routing_key', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='라우팅 키 (AMQP)'),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True, comment='작업 우선순위 (0-9, 높을수록 우선)'),
    sa.Column('eta', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='예정 실행 시간 (ETA: Estimated Time of Arrival)'),
    sa.Column('expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='작업 만료 시간'),
    sa.Column('parent_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='부모 작업 ID (체인/그룹)'),
    sa.Column('root_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='루트 작업 ID (워크플로우)'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='생성 시간 (서울)'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='수정 시간 (서울)'),
    sa.ForeignKeyConstraint(['task_id'], ['task_logs.task_id'], name=op.f('task_metadata_task_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('task_metadata_pkey'))
    )
    op.create_index(op.f('ix_task_metadata_worker_name'), 'task_metadata', ['worker_name'], unique=False)
    op.create_index(op.f('ix_task_metadata_task_id'), 'task_metadata', ['task_id'], unique=False)
    op.create_index(op.f('idx_metadata_worker_queue'), 'task_metadata', ['worker_name', 'queue_name'], unique=False)
    op.create_index(op.f('idx_metadata_parent_root'), 'task_metadata', ['parent_id', 'root_id'], unique=False)
    op.create_table('task_dependencies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='고유 식별자'),
    sa.Column('task_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='작업 ID'),
    sa.Column('depends_on_task_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='의존하는 작업 ID'),
    sa.Column('dependency_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='의존성 타입 (sequential/parallel/conditional)'),
    sa.Column('condition', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='조건부 의존성 조건 (예: success_only, any_status)'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='레코드 생성 시간'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='수정 시간 (서울)'),
    sa.ForeignKeyConstraint(['depends_on_task_id'], ['task_logs.task_id'], name=op.f('task_dependencies_depends_on_task_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['task_logs.task_id'], name=op.f('task_dependencies_task_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('task_dependencies_pkey')),
    sa.UniqueConstraint('task_id', 'depends_on_task_id', name=op.f('uq_task_dependency'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_task_dependencies_task_id'), 'task_dependencies', ['task_id'], unique=False)
    op.create_index(op.f('ix_task_dependencies_depends_on_task_id'), 'task_dependencies', ['depends_on_task_id'], unique=False)
    op.create_index(op.f('idx_dependency_type'), 'task_dependencies', ['dependency_type'], unique=False)
    op.create_table('task_results',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='고유 식별자'),
    sa.Column('task_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='작업 ID (외래키)'),
    sa.Column('result_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='결과 타입 (json/binary/text/pickle)'),
    sa.Column('result_data', sa.TEXT(), autoincrement=False, nullable=True, comment='텍스트 형식 결과'),
    sa.Column('result_binary', postgresql.BYTEA(), autoincrement=False, nullable=True, comment='바이너리 형식 결과'),
    sa.Column('result_size', sa.INTEGER(), autoincrement=False, nullable=True, comment='결과 크기 (바이트)'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='레코드 생성 시간'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='수정 시간 (서울)'),
    sa.ForeignKeyConstraint(['task_id'], ['task_logs.task_id'], name=op.f('task_results_task_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('task_results_pkey'))
    )
    op.create_index(op.f('ix_task_results_task_id'), 'task_results', ['task_id'], unique=True)
    op.create_index(op.f('idx_task_results_type'), 'task_results', ['result_type'], unique=False)
    op.create_index(op.f('idx_task_results_size'), 'task_results', ['result_size'], unique=False)
    op.create_table('task_execution_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='고유 식별자'),
    sa.Column('task_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='작업 ID (외래키)'),
    sa.Column('attempt_number', sa.INTEGER(), autoincrement=False, nullable=False, comment='시도 번호 (1부터 시작)'),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='시도 결과 상태'),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='시도 시작 시간'),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='시도 완료 시간'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='에러 메시지'),
    sa.Column('traceback', sa.TEXT(), autoincrement=False, nullable=True, comment='스택 트레이스'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='레코드 생성 시간'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='수정 시간 (서울)'),
    sa.ForeignKeyConstraint(['task_id'], ['task_logs.task_id'], name=op.f('task_execution_history_task_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('task_execution_history_pkey'))
    )
    op.create_index(op.f('ix_task_execution_history_task_id'), 'task_execution_history', ['task_id'], unique=False)
    op.create_index(op.f('ix_task_execution_history_attempt_number'), 'task_execution_history', ['attempt_number'], unique=False)
    op.create_index(op.f('idx_execution_task_attempt'), 'task_execution_history', ['task_id', 'attempt_number'], unique=False)
    op.create_index(op.f('idx_execution_status_created'), 'task_execution_history', ['status', 'created_at'], unique=False)
    # ### end Alembic commands ###
